/*===========================================================================
  Copyright (C) 2009 by the Okapi Framework contributors
-----------------------------------------------------------------------------
  This library is free software; you can redistribute it and/or modify it 
  under the terms of the GNU Lesser General Public License as published by 
  the Free Software Foundation; either version 2.1 of the License, or (at 
  your option) any later version.

  This library is distributed in the hope that it will be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of 
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser 
  General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License 
  along with this library; if not, write to the Free Software Foundation, 
  Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

  See also the full LGPL text here: http://www.gnu.org/copyleft/lesser.html
===========================================================================*/

package net.sf.okapi.steps.tokenization.common;

import net.sf.okapi.common.ParametersString;

public class LexerRule extends LanguageAndTokenParameters {

	/**
	 * Unique in the lexer's scope name of the rule to be displayed on rule lists in GUI, also to identify the rule inside lexers.
	 * Should not contain spaces, and/or follow other parent lexer's naming standards.
	 */
	private String name;
	
	/**
	 * Rule description.
	 */
	private String description;
	
	/**
	 * Integer value, generated by the underlying lexer, and converted to the tokens specified 
	 * by LanguageAndTokenParameters.tokenNames.
	 */
	private int lexemId;
	
	/**
	 * Optional string, configuring the underlying lexer to produce the lexem.
	 */
	private String rule;
	
	
	@Override
	protected void parameters_reset() {

		super.parameters_reset();
		
		name = "";
		description = "";
		lexemId = 0;
		rule = "";
	}
	
// TODO Add a compile rule hook	
	@Override
	protected void parameters_load(ParametersString buffer) {
		
		super.parameters_load(buffer);
		
		name = buffer.getString("name", "");
		description = buffer.getString("description", "");
		lexemId = buffer.getInteger("lexemId", 0);
		rule = buffer.getString("rule", "");
	}
	
	@Override
	protected void parameters_save(ParametersString buffer) {
		
		super.parameters_save(buffer);
		
		buffer.setString("name", name);
		buffer.setString("description", description);
		buffer.setInteger("lexemId", lexemId);
		buffer.setString("rule", rule);
	}

	public String getName() {
		
		return name;
	}

	public void setName(String name) {
		
		this.name = name;
	}

	public String getDescription() {
		
		return description;
	}

	public void setDescription(String description) {
		
		this.description = description;
	}

	public int getLexemId() {
		
		return lexemId;
	}

	public void setLexemId(int lexemId) {
		
		this.lexemId = lexemId;
	}

	public String getRule() {
		
		return rule;
	}

	public void setRule(String rule) {
		
		this.rule = rule;
	}
		
}
