<?xml version="1.0"?> 
<project name="okapi-apps" default="all" basedir="."> 

	<!-- This script assumes build_okapi-lib.xml has been run alreday -->
	
	<!-- Guess the platform if this build file is not called with the platform already set -->
	<condition property="platform" value="win32-x86">
		<os family="windows"/>
	</condition>
	<condition property="platform" value="cocoa-macosx">
		<os family="mac"/>
	</condition>
	<condition property="platform" value="gtk2-linux-x86">
		<os name="Linux" arch="x86"/>
	</condition>
	<condition property="platform" value="gtk2-linux-x86_64">
		<os name="Linux" arch="x86_64"/>
	</condition>

	<condition property="swtdep" value="swt-win-32">
		<equals arg1="${platform}" arg2="win32-x86"/>
	</condition>
	<condition property="swtdep" value="swt-cocoa-macosx">
		<equals arg1="${platform}" arg2="cocoa-macosx"/>
	</condition>
	<condition property="swtdep" value="swt-carbon-macosx">
		<equals arg1="${platform}" arg2="carbon-macosx"/>
	</condition>
	<condition property="swtdep" value="swt-gtk2-linux-x86">
		<equals arg1="${platform}" arg2="gtk2-linux-x86"/>
	</condition>
	<condition property="swtdep" value="swt-gtk2-linux-x86_64">
		<equals arg1="${platform}" arg2="gtk2-linux-x86_64"/>
	</condition>

	<!-- Set flags for what dstribution is being built -->
	<condition property="building-windows">
		<equals arg1="${platform}" arg2="win32-x86"/>
	</condition>
	<condition property="building-mac">
		<or>
			<equals arg1="${platform}" arg2="cacoa-macosx"/>
			<equals arg1="${platform}" arg2="carbon-macosx"/>
		</or>
	</condition>
	<condition property="building-linux">
		<or>
			<equals arg1="${platform}" arg2="gtk2-linux-x86"/>
			<equals arg1="${platform}" arg2="gtk2-linux-x86_64"/>
		</or>
	</condition>

	<!-- Get the version information to use from file -->
	<property file="../shared/release.properties" />
 	
 	<property name="okapilibName" value="okapi-lib"/>
	<property name="okapilibStamp" value="${okapilibVersion}${releaseInfo}" />
	<property name="okapilibJar" value="${okapilibName}-${okapilibStamp}.jar" />

 	<property name="okapilibuiName" value="okapi-lib-ui"/>
	<property name="okapilibuiStamp" value="${okapilibuiVersion}${releaseInfo}" />
	<property name="okapilibuiJar" value="${okapilibuiName}-${okapilibuiStamp}.jar" />

	<property name="rainbowStamp" value="${rainbowVersion}${releaseInfo}" />

 	<property name="okapiappsName" value="okapi-apps"/>
	<property name="okapiappsStamp" value="${okapiappsVersion}${releaseInfo}" />
	
 	<property name="tmp" value="tmp"/>
	<property name="dist" value="dist_${platform}"/>
	<property name="done" value="done"/>
	<property name="distLib" value="${dist}/lib"/>
	<property name="distName" value="${okapiappsName}_${platform}_${okapiappsStamp}" />
	<property name="mavenStore" value="${user.home}/.m2/repository"/>

	<tstamp>
	 <format property="TODAY" pattern="MMM-dd-yyyy"/>
	</tstamp>
	
	<target name="init">
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${dist}"/>
		</delete>
		<mkdir dir="${distLib}"/>
		<mkdir dir="${done}"/>
		
		<!-- Copy the okapi-lib common distribution
		     This build add to it and overrides some files -->
		<copy todir="${dist}">
			<fileset dir="dist_common"/>
		</copy>
 	</target>

	<target name="okapiLibUI">
	
		<!-- Prepare tmp dir for creating the jar -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${tmp}"/>
		</delete>
		<delete file="tmpJars" quiet="true"/>
		<mkdir dir="${tmp}"/>

		<!-- Copy classes -->
		<copy todir="${tmp}">
			<!-- core -->
			<fileset dir="../../framework/core-ui/target/classes"
			 excludes="**/META-INF/**"/>
			 
			<!-- filters -->
			<fileset dir="../../filters/html-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../filters/openoffice-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../filters/openxml-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../filters/plaintext-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../filters/po-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../filters/properties-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../filters/regex-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../filters/table-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../filters/ts-ui/target/classes"
			 excludes="**/META-INF/**"/>

			<!-- Libraries -->
			<fileset dir="../../libraries/lib-segmentation-ui/target/classes"
			 excludes="**/META-INF/**"/>
			 
			 <!-- Steps -->
			<fileset dir="../../steps/bomconversion-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../steps/encodingconversion-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../steps/fullwidthconversion-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../steps/linebreakconversion-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../steps/searchandreplace-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../steps/segmentation-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../steps/textmodification-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../steps/tokenization-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../steps/uriconversion-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../steps/wordcount-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../steps/uriconversion-ui/target/classes"
			 excludes="**/META-INF/**"/>
			<fileset dir="../../steps/xsltransform-ui/target/classes"
			 excludes="**/META-INF/**"/>
			 
		</copy>
		
		<!-- Copy lib dependencies -->
		<echo file="tmpJars">okapilibuiCP=</echo>

		<property name="dep101" value="${mavenStore}/org/eclipse/swt/${swtdep}/3.5"/>
		<fileset id="list.contents" dir="${dep101}"
		 includes="**/*.jar"/>
		<property name="jar101" refid="list.contents"/>
		<echo file="tmpJars" append="yes">${jar101}</echo>
		<copy todir="${distLib}" file="${dep101}/${jar101}"/>

		<property name="dep102" value="${mavenStore}/swing2swt/swing2swt/1.0"/>
		<fileset id="list.contents" dir="${dep102}"
		 includes="**/*.jar"/>
		<property name="jar102" refid="list.contents"/>
		<echo file="tmpJars" append="yes"> ${jar102}</echo>
		<copy todir="${distLib}" file="${dep102}/${jar102}"/>

		<!-- Create the manifest -->
		<property file="tmpJars"/>
		<manifest file="${tmp}/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${okapilibuiName}"/>
			<attribute name="Implementation-Version" value="${okapilibuiStamp}"/>
			<attribute name="Class-Path" value="${okapilibuiCP}"/>
  		</manifest>
		
		<!-- Create the jar file -->
		<jar jarfile="${distLib}/${okapilibuiJar}" basedir="${tmp}"
		 manifest="${tmp}/MANIFEST.MF"
		 excludes="MANIFEST.MF" />

		<!-- Clean up -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${tmp}"/>
		</delete>
		<delete file="tmpJars" quiet="true"/>

	</target>
	
	<!-- Ratel -->
	<target name="ratel">
		<!-- Prepare tmp dir for creating the jar -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${tmp}"/>
		</delete>
		<mkdir dir="${tmp}"/>

		<!-- Copy classes -->
		<copy todir="${tmp}">
			<fileset dir="../../applications/ratel/target/classes"/>
		</copy>
		
		<!-- Create the manifest file -->
		<manifest file="${tmp}/MANIFEST.MF">
			<attribute name="Implementation-Title" value="ratel"/>
			<attribute name="Implementation-Version" value="${ratelStamp}"/>
			<attribute name="Main-Class" value="net.sf.okapi.applications.ratel.Main"/>
			<!-- Note the reference to the UI library to allow access to parameters editors
			when the tool is used in the UI-enabled distribution -->
			<attribute name="Class-Path" value="${okapilibJar} ${okapilibuiJar}"/>
  		</manifest>
		
		<!-- Create the jar file -->
		<jar jarfile="${distLib}/ratel.jar" basedir="${tmp}"
		 manifest="${tmp}/MANIFEST.MF"
		 excludes="MANIFEST.MF" />

		<!-- Clean up -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${tmp}"/>
		</delete>
	</target>

	<target name="rainbow">
		<!-- Prepare tmp dir for creating the jar -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${tmp}"/>
		</delete>
		<mkdir dir="${tmp}"/>

		<!-- Copy classes -->
		<copy todir="${tmp}">
			<fileset dir="../../applications/rainbow/target/classes"/>
		</copy>
		
		<!-- Create the manifest file -->
		<manifest file="${tmp}/MANIFEST.MF">
			<attribute name="Implementation-Title" value="rainbow"/>
			<attribute name="Implementation-Version" value="${rainbowStamp}"/>
			<attribute name="Main-Class" value="net.sf.okapi.applications.rainbow.Main"/>
			<!-- Note the reference to the UI library to allow access to parameters editors
			when the tool is used in the UI-enabled distribution -->
			<attribute name="Class-Path" value="${okapilibJar} ${okapilibuiJar}"/>
  		</manifest>
		
		<!-- Create the jar file -->
		<jar jarfile="${distLib}/rainbow.jar" basedir="${tmp}"
		 manifest="${tmp}/MANIFEST.MF"
		 excludes="MANIFEST.MF" />

		<copy todir="${dist}" overwrite="true">
			<fileset dir="data/okapi-apps/${platform}"/>
		</copy>

		<!-- Copy shared resources -->
		<!--TODO: fix this to have it outside the jar -->
		<copy todir="${distLib}/shared">
			<fileset dir="../../applications/rainbow/src/main/resources/shared"/>
		</copy>
		
		<copy todir="${dist}" file="data/okapi-apps/readme.html" overwrite="true"/>
		<replace file="${dist}/readme.html" token="@version@" value="${rainbowStamp}"/>
		<replace file="${dist}/readme.html" token="@date@" value="${TODAY}"/>

		<!-- Copy help -->
		<copy todir="${dist}/help" overwrite="true">
			<fileset dir="../../help">
				<include name="**/applications/rainbow/**"/>
				<include name="**/tutorials/**"/>
			</fileset>
		</copy>

		<!-- Remove parts that were for the okapi-lib distribution -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${dist}/localweb"/>
		</delete>

		<!-- Clean up -->
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${tmp}"/>
		</delete>
		
	</target>
	
	<target name="noWinStuff" unless="building-windows">
		<delete file="${dist}/tikal.bat"/>
	</target>
	<target name="winStuff" if="building-windows">
		<delete file="${dist}/tikal.sh"/>
	</target>

	<target name="zipAll" unless="building-linux">
		<zip destfile="${done}/${distName}.zip" basedir="${dist}"/>
	</target>

	<target name="gzipAll" if="building-linux">
		<!--
		TODO: Here we copy the dist dir to a new dir to match the name of the tar file
		      we could build it directly into such a directory 
		-->
		<mkdir dir="${dist}/${distName}"/>
		<copy todir="${dist}/${distName}">
			<fileset dir="${dist}" excludes="${distName}"/>
		</copy>

		<tar destfile="${done}/${distName}.tar.gz" compression="gzip">
			<tarfileset filemode="755" dir="${dist}">
				<include name="${distName}/**/*.sh"/>
			</tarfileset>
			<tarfileset dir="${dist}">
				<include name="${distName}/**/*"/>
				<exclude name="${distName}/**/*.sh"/>
			</tarfileset>
		</tar>
		
		<delete dir="${dist}/${distName}"/>
	</target>

	<target name="all" depends="init, okapiLibUI, ratel, rainbow, noWinStuff, winStuff, zipAll, gzipAll"/>

</project>
