/*===========================================================================
  Copyright (C) 2008-2009 by the Okapi Framework contributors
-----------------------------------------------------------------------------
  This library is free software; you can redistribute it and/or modify it 
  under the terms of the GNU Lesser General Public License as published by 
  the Free Software Foundation; either version 2.1 of the License, or (at 
  your option) any later version.

  This library is distributed in the hope that it will be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of 
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser 
  General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License 
  along with this library; if not, write to the Free Software Foundation, 
  Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

  See also the full LGPL text here: http://www.gnu.org/copyleft/lesser.html
===========================================================================*/

package net.sf.okapi.common;

/**
 * Represents an event generated by a filter that implements IFilter.
 */
public class Event {

	private EventType filterEventType;
	private IResource resource;

	/**
	 * Creates a new event without any associated resource.
	 * Used for filter events that have no resources such as START and FINISH.
	 * @param filterEventType The type of event to create.
	 */
	public Event (EventType filterEventType) {
		this.filterEventType = filterEventType;		
	}

	/**
	 * Creates a new event with an associated resource.
	 * @param filterEventType The type of event to create.
	 * @param resource The resource to associate to the event.
	 */
	public Event(EventType filterEventType, IResource resource) {
		this.filterEventType = filterEventType;
		this.resource = resource;
	}

	/**
	 * Creates a new event with an associated resource and a skeleton object.
	 * @param filterEventType The type of event to create.
	 * @param resource The resource to associate to the event.
	 * @param skeleton The skeleton to associate to the event.
	 */
	public Event(EventType filterEventType, IResource resource, ISkeleton skeleton) {
		this.filterEventType = filterEventType;
		this.resource = resource;
		this.resource.setSkeleton(skeleton);
	}

	/**
	 * Gets the type of this event.
	 * @return The type of this event.
	 */
	public EventType getEventType() {
		return filterEventType;
	}

	/**
	 * Gets the resource associated to this event.
	 * @return The resource associated to this event, or null if there is none.
	 */
	public IResource getResource() {
		return resource;
	}

}
